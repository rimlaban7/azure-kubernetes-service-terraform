name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      current_environment:
        type: string
        default: prod

permissions:
  id-token: write
  contents: read

env:
  CONFIG_FULL_RESOURCE_GROUP_NAME: ${{ format('resource_group_name={0}-{1}', secrets.RESOURCE_GROUP_NAME, inputs.current_environment) }}
  CONFIG_FULL_STORAGE_ACCOUNT_NAME: ${{ format('storage_account_name={0}{1}', secrets.STORAGE_ACCOUNT_NAME, inputs.current_environment) }}
  CONFIG_BLOB_CONTAINER_NAME: ${{ format('container_name={0}', secrets.BLOB_CONTAINER_NAME) }}
  CONFIG_KEY: ${{ format('key={0}.terraform.{1}', inputs.current_environment, secrets.BLOB_CONTAINER_NAME) }}
  TF_VAR_resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME }}
  TF_VAR_environment: ${{ inputs.current_environment }}
  TF_VAR_location: ${{ secrets.LOCATION }}
  TF_VAR_resource_group_import_id: ${{ secrets.RESOURCE_GROUP_IMPORT_ID }}
  TF_VAR_storage_account_name: ${{ secrets.STORAGE_ACCOUNT_NAME }}
  TF_VAR_account_tier: ${{ secrets.ACCOUNT_TIER }}
  TF_VAR_account_replication_type: ${{ secrets.ACCOUNT_REPLICATION_TYPE }}
  TF_VAR_storage_account_import_id: ${{ secrets.STORAGE_ACCOUNT_IMPORT_ID }}
          
jobs: 
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: ${{ inputs.current_environment }}

    defaults:
        run:
          shell: bash

    steps:

    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Az CLI Login
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v1
    
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true  

    - name: Terraform Init
      id: init
      run: |
        terraform init \
        -backend-config ${{ env.CONFIG_FULL_RESOURCE_GROUP_NAME }} \
        -backend-config ${{ env.CONFIG_FULL_STORAGE_ACCOUNT_NAME }} \
        -backend-config ${{ env.CONFIG_BLOB_CONTAINER_NAME }} \
        -backend-config ${{ env.CONFIG_KEY }}
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_USE_OIDC: true

    - name: Terraform Validate
      id: validate
      run: terraform validate

    - name: Init TFLint
      run: tflint --init

    - name: Run TFLint
      run: tflint -f compact

    - name: Terraform Plan
      id: plan
      run: terraform plan --out=out.tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        ARM_USE_OIDC: true

    - name: Create the plan summary
      uses: actions/github-script@v6
      if: always()
      id: summary
      env:
        PLAN: '${{ steps.plan.outputs.stdout }}'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Prep the output
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`, Workflow: \`${{ github.workflow }}\`*`;
          
          // 2. Set the output variable
          const fs = require('fs');
          fs.writeFileSync('./summary.md', output);
          core.setOutput('summary', output);
      
    - name: Write the step summary
      if: always()
      run: cat summary.md >> $GITHUB_STEP_SUMMARY

    - name: Upload the plan
      uses: actions/upload-artifact@v3
      with:
        name: tf-plan
        path: ./out.tfplan

  #terraform-apply:
  #  name: Terraform Plan
  #  if: ${{ inputs.current_environment == 'prod' }}
  #  runs-on: ubuntu-latest
  #  environment: ${{ inputs.current_environment }}

  #  defaults:
  #    run:
  #      shell: bash


